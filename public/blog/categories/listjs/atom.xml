<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: listjs | @javve]]></title>
  <link href="http://jonnystromberg.com/blog/categories/listjs/atom.xml" rel="self"/>
  <link href="http://jonnystromberg.com/"/>
  <updated>2012-04-24T10:26:00+02:00</updated>
  <id>http://jonnystromberg.com/</id>
  <author>
    <name><![CDATA[Jonny StrÃ¶mberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[List.js: Fuzzy Search Plugin]]></title>
    <link href="http://jonnystromberg.com/listjs-fuzzy-search-plugin/"/>
    <updated>2012-04-24T00:00:00+02:00</updated>
    <id>http://jonnystromberg.com/listjs-fuzzy-search-plugin</id>
    <content type="html"><![CDATA[<p>A big thanks to <a href="https://github.com/LuukvE">LuukvE</a> who made a <a href="https://github.com/LuukvE/list/commit/a75b6ef5649c5fb4232a40ef2f5191d0b57e1ede">commit</a> from which I could
create this Fuzzy Search plugin.</p>

<h2>The difference between Fuzzy Search and List.js default search</h2>

<p>The default search will conduct a time efficient search for an exact match in the content searched, while the fuzzy search will render results depending on if they are included anywhere in the content.</p>

<p>``` javascript
var items = [</p>

<pre><code>{ character: "Guybrush Threepwood", game: "The Secret of Monkey Island" },
{ character: "Manny Calavera", game: "Grim Fandango" },
{ character: "Bernard Bernoulli", game: "Maniac Mansion" }
</code></pre>

<p>];</p>

<p>list.search('gu thre'); -> return none
list.fuzzySearch('gu thre') -> return 1 item
```</p>

<h2>Live example</h2>

<p>Check out this -> <a href="http://listjs.com/examples/fuzzy-search.html">Listjs.com/examples/fuzzy-search</a></p>

<h2>Implementation</h2>

<p>``` html</p>

<div id="list-id">
    <input class="fuzzy-search" />
    <ul class="list">
        /* A bunch of items */
    </ul>
</div>




<script>

var fuzzyOptions = {
    searchClass: "fuzzy-search",
      location: 0,
      distance: 100,
      threshold: 0.4,
    multiSearch: true
};
var options = {
      valueNames: [ 'name', 'category' ],
      plugins: [
        [ 'fuzzySearch', fuzzyOptions ]
      ]
};

var listObj = new List('list-id', options);

// Search manually 
listObj.fuzzySearch('my search');

// Search manually on specific columns
listObj.fuzzySearch('my search', [ 'name' ]);

</script>


<p>```</p>

<h2>Options</h2>

<p>All options are optional. Simplest implementation is: <code>plugins: [ [ 'fuzzySearch' ] ]</code></p>

<ul>
<li><strong>location</strong> <em>(Int, default: 0)</em><br/>
Approximately where in the text is the pattern expected to be found?</li>
<li><strong>distance</strong> <em>(Int, default: 100)</em><br/>
Determines how close the match must be to the fuzzy location (specified above). An exact letter match which is 'distance' characters away from the fuzzy location would score as a complete mismatch. A distance of <code>0</code> requires the match be at the exact location specified, a threshold of <code>1000</code> would require a perfect match to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.</li>
<li><strong>threshold</strong> <em>(Int, default: 0.4)</em><br/>
At what point does the match algorithm give up. A threshold of <code>0.0</code> requires a perfect match (of both letters and location), a threshold of <code>1.0</code> would match anything.</li>
<li><strong>multiSearch</strong> <em>(Boolean, default: true)</em><br/>
Subtract arguments from the <code>searchString</code> or put <code>searchString</code> as only argument</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List.js 0.2.1: Release notes]]></title>
    <link href="http://jonnystromberg.com/listjs-0-2-1-release-notes/"/>
    <updated>2012-04-24T00:00:00+02:00</updated>
    <id>http://jonnystromberg.com/listjs-0-2-1-release-notes</id>
    <content type="html"><![CDATA[<p><img class="float-right default" src="/images/projects/listjs/listjs-logo.jpg"></p>

<h2>Major changes</h2>

<ul>
<li>A <a href="/listjs-fuzzy-search-plugin/">Fuzzy Search plugin</a> is added</li>
<li>The filter function in <code>list.filter(filterFunction)</code> now takes an <code>Item</code> instead of <code>values</code> which results in greater possibilities, e.g. by using <code>item.elm</code>. _Thanks <a href="https://github.com/sprynmr">Bob Spryn</a></li>
</ul>


<h2>Other changes</h2>

<ul>
<li>Change plugin functionality so that plugins are created with `Plugin.call(list, locals, options)?, so that plugins extends the List-objects that they are created in.</li>
<li>Add possibility to initiate with a <code>element</code> instead of a <code>ID</code>.</li>
</ul>


<h2>Bug fixes</h2>

<ul>
<li>Don't break <code>.hasClass()</code> if a element doesn't have a class.</li>
<li>Do not require items to contain all <code>valueNames</code> on initiation.</li>
</ul>


<p><em><strong><a href="http://listjs.com">Go to Listjs.com</a> and download tha latest version!</strong></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The List.js Plugin Guide]]></title>
    <link href="http://jonnystromberg.com/listjs-plugins-guide/"/>
    <updated>2012-01-26T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/listjs-plugins-guide</id>
    <content type="html"><![CDATA[<p><img class="float-right default" src="/images/projects/listjs/listjs-logo.jpg"></p>

<p>Version 0.2.0 introduced a new feature of List.js called plugins. This post will guide you through how to use and make plugins.</p>

<p>Plugins are scripts that can be loaded at List.js initiation and then becomes accessible with <code>listObj.pluginName</code>.</p>

<p>There are one plugin bundled with List.js and it is found in <code>/plugins/paging/list.paging.js</code> (and <code>/plugins/paging/list.paging.min.js</code>). Here is some code that shows how to load it.</p>

<p>``` javascript
var options = {</p>

<pre><code>valueNames: [ 'name', 'category' ],
page: 3,
plugins: [
    [ 'paging' ]
]
</code></pre>

<p>};</p>

<p>var listObj = new List('listId', options);
```</p>

<p>It is also possible to add options and load multiple instances of tha same plugins (if the plugin itself allows it).</p>

<p><strong>Notice</strong>: If the property <code>name</code> is added in the plugin option parameter does the plugin become accessible through <code>listObj.namePropertyValue</code> (<code>listObj.paging2</code> in this example). This is useful when having multiple instances of the same plugin.</p>

<p>``` javascript
var options = {</p>

<pre><code>valueNames: [ 'name', 'category' ],
page: 3,
plugins: [
    [ 'paging' ],
    [ 'paging', {
        name: "paging2",
        pagingClass: "topPaging",
        innerWindow: 1,
        left: 2,
        right: 2
    ]
]
</code></pre>

<p>};</p>

<p>var listObj = new List('listId', options);
```</p>

<p>Read more about the <a href="http://jonnystromberg.com/listjs-paging-plugin/">paging plugin here</a>.</p>

<h2>Make Your Own Plugin</h2>

<p>This is everything that is needed to make you own plugin. Notice  the two parameters: <code>locals</code> that contains
all hidden/private local variables of List.js, <code>options</code> contains the options shown in the example above.</p>

<p>``` javascript list.yourPluginName.js
List.prototype.plugins.yourPluginName = function(locals, options) {</p>

<pre><code>// Do stuff!
</code></pre>

<p>};
```</p>

<p>The plugin is run after the list is initiated. See the source code of the <a href="http://jonnystromberg.com/listjs-paging-plugin/">paging plugin here</a>.</p>

<h3>Naming</h3>

<p>All List.js plugins should be named <code>list.pluginName.js</code> or <code>list.pluginName.min.js</code>.</p>

<h3>A Good Tip</h3>

<p>Use <code>list.on('updated', yourFancyFunction);</code> to updated you plugin when the list have been updated.</p>

<p>One other really useful method is <code>.update()</code> that updates the list and then triggers the above metioned event (be careful, do not make an infinit loop here).</p>

<p>Remeber that you find all List &amp; Item methods in the <a href="https://github.com/javve/list/blob/master/README.md">documentation at Github</a>.</p>

<h3>Pull requests or links wanted</h3>

<p>If you've made a nice, well written and useful plugin, I would be very happy if you <a href="http://github.com/javve/list">made a pull request</a> so I could bundle it with List.js, or sent me a link so I could add it to <a href="http://listjs.com">Listjs.com</a> and <a href="http://github.com/javve/list">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The List.js Paging Plugin]]></title>
    <link href="http://jonnystromberg.com/listjs-paging-plugin/"/>
    <updated>2012-01-26T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/listjs-paging-plugin</id>
    <content type="html"><![CDATA[<p>The List.js paging plugin is bundled with the script and is located in <code>/plugins/paging/list.paging.js</code> and <a href="http://listjs.com/examples/paging.html">click here</a> if you want to see it in action. To use the plugin just include the .js file at your page and do like this:</p>

<p>``` html</p>

<div id="listId">
    <ul class="list">
        /* A bunch of items */
    </ul>
    <ul class="paging"></ul>
</div>




<script>
var options = {
    valueNames: [ 'name', 'category' ],
    page: 3,
    plugins: [
        [ 'paging' ]
    ]
};

var listObj = new List('listId', options);
</script>


<p>```</p>

<p>And the paging that gets created looks <em><strong>kinda</strong></em> like this:</p>

<p>``` html</p>

<div id="listId">
    <ul class="list">
        /* A bunch of items */
    </ul>
    <ul class="paging">
       <li>
           <div class="page">
               <a class="active" href="javascript:function Z(){Z=\"\"}Z()">1</a>
           </div>
       </li>
       <li>
           <div class="page">
               <a href="javascript:function Z(){Z=\"\"}Z()">2</a>
           </div>
       </li>
       <li>
           <div class="page">
               ...
           </div>
       </li>
    </ul>
</div>


<p>```</p>

<p>There are som options available thought.</p>

<ul>
<li><p><strong>name</strong> <em>(String, default: "paging")</em><br/>
Default option for all plugins. Defines how to access the plugin from the list object <code>listObj.pluginName</code>.</p></li>
<li><p><strong>pagingClass</strong> <em>(String, default: "paging")</em><br/>
The class that defines which <code>ul</code> that should contain the paging (must be inside the list container)</p></li>
<li><p><strong>innerWindow</strong> <em>(Int, default: 2)</em><br/>
How many pages should be visible on each side of the current page.<br/>
<code>innerWindow: 2</code> ... 3 4 <strong>5</strong> 6 7 ...<br/>
<code>innerWindow: 1</code> ... 4 <strong>5</strong> 6 ...</p></li>
<li><p><strong>outerWindow</strong> <em>(Int, default: 0)</em><br/>
How many pages should be visible on from the beginning and from the end of the paging.<br/>
<code>outerWindow: 0</code> ... 3 4 <strong>5</strong> 6 7...<br/>
<code>outerWindow: 2</code> 1 2 ... 4 5 <strong>6</strong> 7 8 ... 11 12</p></li>
<li><p><strong>left</strong> <em>(Int, default: 0)</em><br/>
Same as <code>outerWindow</code> but only from left.
<code>outerWindow: 2</code> and <code>left: 1</code> 1 ... 4 5 <strong>6</strong> 7 8 ... 11 12</p></li>
<li><p><strong>right</strong> <em>(Int, default: 0)</em><br/>
Same as <code>left</code> but from right.</p></li>
</ul>


<p><strong>Notice</strong>: The number of items at each page are decided by the List.js own property <code>page</code>. To set this just add <code>page: Number</code> to the option object sent into the List.js constructor (as been done in both of the examples at this page).</p>

<h2>Two pagings</h2>

<p>``` html</p>

<div id="listId">
    <ul class="pagingTop"></ul>
    <ul class="list">
        /* A bunch of items */
    </ul>
    <ul class="pagingBottom"></ul>
</div>




<script>
var pagingTopOptions = { 
    name: "pagingTop", 
    pagingClass: "pagingTop",
    outerWindow: 2
};
var pagingBottomOptions = { 
    name: "pagingBottom", 
    pagingClass: "pagingBottom",
    innerWindow: 3,
    left: 2,
    right: 4
};
var listOptions = {
    valueNames: [ 'name', 'category' ],
    page: 3,
    plugins: [
        [ 'paging', pagingTopOptions],
        [ 'paging', pagingBottomOptions]
    ]
};

var listObj = new List('listId', listOptions);
</script>


<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List.js 0.2.0: Plugins and Paging]]></title>
    <link href="http://jonnystromberg.com/listjs-0-2-0-plugins-paging/"/>
    <updated>2012-01-26T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/listjs-0-2-0-plugins-paging</id>
    <content type="html"><![CDATA[<p><em><strong><a href="http://listjs.com">Go to Listjs.com</a> and download tha latest version!</strong></em>
<img class="float-right default" src="/images/projects/listjs/listjs-logo.jpg"></p>

<p>This is a release many have been waiting for! Beta 0.2.0 includes several large improvments and I will go through them one by one.</p>

<h2>Plugins!</h2>

<p>The biggest update in List.js 0.2.0 is the support for plugins. With plugin it gets much easier to make scripts that integrate with List.js. <a href="/listjs-plugins-guide/">Read more Â»</a></p>

<h2>Paging Plugin</h2>

<p>The first plugin includes the most wanted feature in List.js history (haha). Paging! <a href="/listjs-paging-plugin/">Read more about the paging plugin Â»</a></p>

<h2>Better options for initization of empty lists</h2>

<p>A new option for initiating empty lists have been added. Now you can use a html-string in the <code>item</code> options. Example shown here:
``` javascript</p>

<div id="hacker-list">
    <ul class="list"></ul>
</div>




<script>
    var options = {
        item: '<li><h3 class="name"></h3><p class="city"></p></li>'
    };

    var values = [
        { name: 'Jonny', city:'Stockholm' }
        , { name: 'Jonas', city:'Berlin' }
    ];

    var hackerList = new List('hacker-list', options, values);
</script>


<p><code>``
**Notice**: this do not work with</code><tr>`.</p>

<h2>New initization options</h2>

<ul>
<li><strong>page</strong> <em>(int, default: 200)</em> have replaced <code>maxVisibleItemsCount</code> and represents how many items that should be visible at the same time.</li>
<li><strong>i</strong> <em>(int, default: 0)</em> defines which item should be the first visble.</li>
<li><strong>plugins</strong> <em>(array, default: undefined)</em> defines which plugins this instance of the List should use. <a href="/listjs-plugins-guide/">Read more about plugins Â»</a></li>
</ul>


<h2>New properties</h2>

<ul>
<li><strong>visibleItems</strong> <em>(array)</em> Returns the currently visible items.</li>
<li><strong>matchingItems</strong> <em>(array)</em> Returns the items matching the currently active searches and filters, it could there by contains non visible items. If no active searches and filters does <code>.matchingItems</code> contain same items as <code>.items</code></li>
<li><strong>searched</strong> <em>(boolean)</em> Returns <code>true</code> if there are a active search in the list.</li>
<li><strong>filtered</strong> <em>(boolean)</em> Returns <code>true</code> if there are a active filter in the list.</li>
<li><strong>plugins</strong> <em>(object)</em> Returns the <em>plugins</em> that could be initiated (to interact with active plugins use <code>listObj.pluginName</code>).</li>
</ul>


<h2>New methods</h2>

<ul>
<li>Replaced <code>.addAsync(items)</code> with <code>.add(items, callback)</code>.</li>
<li><strong>show()</strong>
Shows <code>page</code> number of items from <code>i</code>. Use for paging etc.
``` javascript
itemsInList = [
  { id: 1, name: "Jonny" }
  , { id: 2, name "Gustaf" }
  , { id: 3, name "Jonas" }
  , { id: 4, name "Egon" }
  , { id: 5, name "Frank" }
  , { id: &amp;, name "Ester" }
];</li>
</ul>


<p>listObj.show(4, 3); -> Display item 4,5,6
<code>``
* **update()**
Updates the current state of the list. Meaning that if you for instance hides some items with</code>itemObj.hide()<code>method then you have to call</code>listObj.update()<code>if you want the paging to update.
* **on(event, callback)**  
Execute</code>callback<code>when list have been updated (triggered by</code>update()`, which is used by a lot of methods).</p>

<h2>New Item methods</h2>

<ul>
<li><strong>matching()</strong>
Returns true if the item match the current filter and searches. Visible items always matches, but matching items are not always visible.</li>
<li><strong>visible()</strong>
Returns boolean. True if the item is visible. Visible items always matches, but matching items are not always visible.</li>
</ul>


<h2>Various</h2>

<ul>
<li>Fixed IE7 bug in helper <code>hasClass()</code>, <code>addClass()</code> and <code>removeClass()</code>.</li>
<li>Fix searching with null and undefined values + using <code>searchString = 0</code></li>
</ul>


<p>That was it! Pretty exciting right? Looking forward do see some awesome plugins!</p>

<p><em><strong><a href="http://listjs.com">Go to Listjs.com</a> and download tha latest version!</strong></em></p>
]]></content>
  </entry>
  
</feed>
