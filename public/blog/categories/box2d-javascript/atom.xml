<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: box2d-javascript | @javve]]></title>
  <link href="http://jonnystromberg.com/blog/categories/box2d-javascript/atom.xml" rel="self"/>
  <link href="http://jonnystromberg.com/"/>
  <updated>2012-11-13T23:04:45+01:00</updated>
  <id>http://jonnystromberg.com/</id>
  <author>
    <name><![CDATA[Jonny Strömberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Box2D JaveScript Tutorial]]></title>
    <link href="http://jonnystromberg.com/box2d-javascript-tutorial/"/>
    <updated>2012-02-07T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/box2d-javascript-tutorial</id>
    <content type="html"><![CDATA[<p><canvas id="box2d-demo" width="740" height="380" style="background-color:#2A3038; margin:-30px -30px 20px;"></canvas>
<script src="/tutorials/box2d-web/box2d-web-2.1.a.3.js"></script>
<script src="/tutorials/box2d-web/box2d-web-demo.js"></script></p>

<p>This is tutorial is written as a compliment to my <a href="http://twitter.com/sthlmjs">@Sthlmjs</a> presentation at 7 February 2012. The presentation was called <strong>"Box2D-web - Uncovering The Magic Behind SilarApp"</strong> and refers to the <a href="/projects/silarapp">SilarApp project</a> that I work in together with <a href="http://twitter.com/himynameisjonas">@himynameisjonas</a> and <a href="http://twitter.com/ingmr">@ingmr</a>.</p>

<p><a href="http://silarapp.com"><img class="float-right image-right" src="/images/posts/2012/box2d-web/silarapp.jpg"></a></p>

<p>The tutorial explains how to the demo above was made and you can find the source at <a href="http://github.com/javve/box2d-javascript">Github.com/javve/box2d-javascript</a>. I <strong>strongly</strong> encourages you to download the source and look at it while reading this tutorial.</p>

<p>I will go through the demo step by step in order of execution.</p>

<h2>Background</h2>

<p><a href="http://box2d.org/">Box2D</a> is a open source physics engine originally written by <a href="https://twitter.com/#!/erin_catto">Erin Catto</a> in C++. Over the years it has been ported to a number of <a href="http://www.box2d.org/links.html">different languages</a>. Today there are two version in JavaScript,  <strong><a href="http://code.google.com/p/box2dweb/">Box2d-web</a></strong> and <a href="http://box2d-js.sourceforge.net/">Box2d-js</a>. The latter one is sadly no longer supported so my suggestion is using the first. It is a direct port from <a href="http://www.box2dflash.org/">Box2DFlash 2.1a</a> and is the one that this tutorial is using.</p>

<h2>Good things to know</h2>

<ul>
<li>Box2d does <strong>not</strong> uses pixels, it measures MKS (meters, kilograms, and seconds). This could be a bit weird but no worries! <a href="http://blog.zincroe.com/2009/05/units-in-box2d/">Read more here</a>.</li>
<li>Box2d only handles convex elements. It is however possible to put together multiple element to create concaves.<br/>
<img src="/tutorials/box2d-web/convex.png"></li>
<li>Box2D is built to optimally handle dynamic (moving) objects that are 0.1-10 meters, and static (not moving) that are up to 50 meters (yeah, no particle simulations).</li>
<li>Box2D <strong>only</strong> handles that physics, it does not handles drawing objects. This means that we have to paint the <code>&lt;canvas&gt;</code> ourselves (see the <strong>Loop</strong> section). <strong>Notice</strong>: Box2D however provides a debugging feature where it can draw the objects itself, search for <code>debug</code> in the demo source to see how to use it.</li>
</ul>


<h2>Getting started</h2>

<ol>
<li><a href="http://code.google.com/p/box2dweb/downloads/list">Download Box2d-web</a></li>
<li>Include <code>box2d-web-2.1.a.3.js</code> at your page.</li>
<li>Create a <code>&lt;canvas&gt;</code> with including <code>height</code>, <code>width</code> and <code>id</code>.</li>
</ol>


<p>``` javascript
<canvas id="box2d-demo" width="960" height="480" backgroundColor="2A3038"></canvas></p>

<script src="box2d-web-2.1.a.3.js"></script>


<p>```</p>

<h2>Basic demo structure</h2>

<p>``` javascript
// First: Create some Box2D shortcuts.</p>

<p>// Initiate all local variables used in this demo</p>

<p>// Handles all initiation stuff (that is not directly related to box2d)
var init = { .. };</p>

<p>// Used for adding boxes and circles
var add = { .. };</p>

<p>// Contains all functions that interacts with Box2d (except those in var loop = {..};
var box2d = { .. };</p>

<p>// Contains the functions that are called over and over again to make stuff move
var loop = { .. };</p>

<p>// Various helpers
var helpers = { .. };</p>

<p>// The base Shape and Box &amp; Circle that share the Shape prototype
var Shape = function(){ .. };
var Circle = function(){ .. };
var Box = function(){ .. };
```</p>

<h2>Initiation</h2>

<p>The initiation is done by the <code>var init = { .. }</code> object that contains a collection of function that are needed to set up the demo.</p>

<p>It begins with <code>init.start()</code> that executes the other functions.</p>

<ul>
<li>Set the <code>SCALE = 30</code>. Meaning that all pixel values are divide with 30 to get the size in meters. E.g. the canvas is <code>740 / 30 =  24.6 m</code>.</li>
<li>Initiate the canvas area of which the demo will use.</li>
<li>Call <code>box2d.create.world()</code> to setup the <code>world</code> object that "is" Box2D.
<code>
world = new b2World(
  new b2Vec2(0, 10)       // gravity
  , false                 // allow sleep
);
</code></li>
<li>Create the default fixture object with <code>box2d.create.defaultFixture()</code> which will be used for all shapes (more about fixers later).</li>
<li>Create walls, ground and roof by simply use the <code>add.box()</code> function to add boxes outside the visible area.</li>
<li>Init callbacks, meaning the ones that are triggered when user clicks on the canvas (more about the mouse-related stuff later).</li>
<li>Fires of the loop and starts the demo! (read more later in the <strong>Loop</strong> section.</li>
</ul>


<h2>Adding shapes</h2>

<p>When an user clicks on the <code>&lt;canvas&gt;</code> the function <code>add.random()</code> is called with calls <code>add.box()</code> or <code>add.circle()</code>. Here is the code for creating a <code>Circle</code>.
<code>javascript
options.radius = 0.5 + Math.random()*1;
var shape = new Circle(options);
shapes[shape.id] = shape;
box2d.addToWorld(shape);
</code>
As you can see it first creates a Circle object (that is used to  paint the object on the screen). Then it calls <code>box2d.addToWorld()</code> that adds the shape to Box2D. Next section explains how that function works.</p>

<h3>About Box2D Bodies and Fixtures</h3>

<p>All elements in Box2D are called <strong>bodies</strong> and each body have once or more <strong>fixtures</strong>. Usually you see it like bodies are containers which have a position and then contains fixtures that have a shape, density, friction and collision control. In this demo all fixtures uses the sam default fixture definition.</p>

<h4>Bodies</h4>

<ul>
<li>Contains fixture(s)</li>
<li>Position</li>
<li>Angle</li>
<li>Static or dynamic</li>
</ul>


<h4>Fixtures</h4>

<ul>
<li>Density</li>
<li>Friction</li>
<li>Has a shape</li>
<li>Collision</li>
</ul>


<p>Here are the code that handles body and fixture-related stuff in this demo.
``` javascript
// Initiated earlier
var fixDef = new b2FixtureDef;
fixDef.density = 1.0;
fixDef.friction = 0.5;
fixDef.restitution = 0.2;</p>

<p>var box2d = {</p>

<pre><code>addToWorld: function(shape) {
    var bodyDef = this.create.bodyDef(shape);
    var body = this.create.body(bodyDef);
    if (shape.radius) {
        this.create.fixtures.circle(body, shape);
    } else {
        this.create.fixtures.box(body, shape);
    }
},
create: {
    world: function() { .. },
    defaultFixture: function() { .. },
    bodyDef: function(shape) {
        var bodyDef = new b2BodyDef;

        if (shape.isStatic == true) {
            bodyDef.type = b2Body.b2_staticBody;
        } else {
            bodyDef.type = b2Body.b2_dynamicBody;
        }
        bodyDef.position.x = shape.x;
        bodyDef.position.y = shape.y;
        bodyDef.userData = shape.id;
        bodyDef.angle = shape.angle;

        return bodyDef;
    },
    body: function(bodyDef) {
        return world.CreateBody(bodyDef);
    },
    fixtures: {
        circle: function(body, shape) {
            fixDef.shape = new b2CircleShape(shape.radius);
            body.CreateFixture(fixDef);
        },
        box: function(body, shape) {
            fixDef.shape = new b2PolygonShape;
            fixDef.shape.SetAsBox(shape.width / 2, shape.height / 2);
            body.CreateFixture(fixDef);
        }
    }
},
get: function() { … }
</code></pre>

<p>};
```</p>

<h2>The loop</h2>

<p>The loop is the center of each Box2D application (or other game etc). In this demo it has three steps.
``` javascript
// On my signal: Unleash hell.
(function hell() {</p>

<pre><code>loop.step();
loop.update();
loop.draw();
requestAnimFrame(hell);
</code></pre>

<p>})();</p>

<p>var loop = {</p>

<pre><code>step: function() {
    var stepRate = 1 / 60;
    world.Step(stepRate, 10, 10);
    world.ClearForces();
},
update: function () {            
    for (var b = world.GetBodyList(); b; b = b.m_next) {
        if (b.IsActive() &amp;&amp; typeof b.GetUserData() !== 'undefined' &amp;&amp; b.GetUserData() != null) {
            shapes[b.GetUserData()].update(box2d.get.bodySpec(b));
        }
    }
    needToDraw = true;
},
draw: function() {
    if (!needToDraw) return;
    if (!debug) ctx.clearRect(0, 0, canvas.width, canvas.height);

    for (var i in shapes) {
        shapes[i].draw(ctx);
    }
    needToDraw = false;
}
</code></pre>

<p>};
<code>``
First one thing:</code>requestAnimFrame()` is simply a helper function that makes animation smarter. <a href="http://paulirish.com/2011/requestanimationframe-for-smart-animating/">Read more about it here</a>.</p>

<ol>
<li>The first step <code>loop.step();</code> tells the Box2D world-object to take one step, and it is here where all the magic happens (moving, collision detection etc).</li>
<li>The next step <code>loop.update();</code> collects the updates from Box2D and transfer them to our own shapes (<code>Circle</code> and <code>Box</code>).</li>
<li>The last step <code>loop.draw()</code> redraws the <code>&lt;canvas&gt;</code> with all the updated shapes.</li>
</ol>


<h3>About drawing</h3>

<p>Drawing shapes/object on the screen is done with regular canvas-methods etc. Both <code>Circle</code>and <code>Box</code> have their own <code>.draw()</code> method. I will not explain these in detail, but they basically get the position from the <code>world</code> object and then uses it to paint itself on the <code>canvas</code> with help of the <code>ctx</code>. Here it the <code>.draw()</code> method from <code>Box</code>.</p>

<p>``` javascript
this.draw = function() {</p>

<pre><code>ctx.save();
ctx.translate(this.x * SCALE, this.y * SCALE);
ctx.rotate(this.angle);
ctx.translate(-(this.x) * SCALE, -(this.y) * SCALE);
ctx.fillStyle = this.color;
ctx.fillRect(
    (this.x-(this.width / 2)) * SCALE,
    (this.y-(this.height / 2)) * SCALE,
    this.width * SCALE,
    this.height * SCALE
);
ctx.restore();
</code></pre>

<p>};
```</p>

<h2>Wrapping up</h2>

<p>That's it. I hope you liked the tutorial and if you have any questions or suggestions feel free to ping me at Twitter <a href="http://twitter.com/javve">@javve</a>.</p>

<p>Hopefully will I follow up this tutorial with a new one and with more <a href="http://github.com/javve/box2d-javascript">demos at Github</a>.</p>

<h2>Continue reading</h2>

<ul>
<li><a href="http://www.box2d.org/manual.html">Box2D manual</a> contains a lot of interesting stuff.</li>
<li><a href="http://creativejs.com/2011/09/box2d-javascript-tutorial-series-by-seth-ladd/">Seth Ladd's excellent Box2D-web tutorials</a> (it's from these I learned Box2D-web)</li>
<li><a href="http://blog.j15r.com/2011/12/for-those-unfamiliar-with-it-box2d-is.html">Box2D-web performance</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
