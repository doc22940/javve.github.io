<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@javve]]></title>
  <link href="http://jonnystromberg.com/atom.xml" rel="self"/>
  <link href="http://jonnystromberg.com/"/>
  <updated>2012-04-22T20:01:19+02:00</updated>
  <id>http://jonnystromberg.com/</id>
  <author>
    <name><![CDATA[Jonny StrÃ¶mberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hash.js - We Stand Behind #]]></title>
    <link href="http://jonnystromberg.com/hash-js/"/>
    <updated>2012-02-07T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/hash-js</id>
    <content type="html"><![CDATA[<p>Hash.js is a micro (0.5 KB) JavaScript lib that makes it easy
to manipulate everything that is behind <code>#</code> in the url.</p>

<p><strong>Check out the Github repo</strong> at <strong><a href="http://github.com/javve/hash.js">github.com/javve/hash.js</a></strong> and see it in action at <a href="http://pngtextures.com">PNGTextures.com</a></p>

<p><strong>Notice</strong>:  The main focus of Hash.js is simplcity. This is no tool for your super-ajax-native-feeling-app-with-google-bot-support. If
that&#8217;s your usage situation, use the awesome <a href="https://github.com/balupton/history.js">History.js</a>.</p>

<h2>Usage</h2>

<p>Just include <code>hash.min.js</code> or <code>hash.js</code> at your site and then a <code>hash</code> object will become available.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;hash.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    hash.add({foo: &quot;bar&quot; });        // Url becomes http://url.com#foo=bar
</span><span class='line'><span class="nt">&lt;/scrtip&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Methods</h2>

<ul>
<li><strong>hash.add(params)</strong><br/>
Add parameter to hash</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">hash</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span> <span class="nx">foo</span><span class="o">:</span> <span class="s2">&quot;bar&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// http://url.com#foo=bar</span>
</span><span class='line'>
</span><span class='line'><span class="nx">hash</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span> <span class="nx">car</span><span class="o">:</span> <span class="s2">&quot;dar&quot;</span><span class="p">,</span> <span class="nx">sar</span><span class="o">:</span> <span class="s2">&quot;par&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// http://url.com#foo=bar&amp;car=dar&amp;sar=par</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>hash.get(param)</strong> or <strong>hash.get()</strong>  <br/>
Returns value of paramter in hash. If <code>param</code> is <code>undefined</code> then all values are returned.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fooValue</span> <span class="o">=</span> <span class="nx">hash</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// fooValue == &quot;bar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">allValues</span> <span class="o">=</span> <span class="nx">hash</span><span class="p">.</span><span class="nx">get</span><span class="p">();</span>
</span><span class='line'><span class="c1">// allValues == { foo: &quot;bar&quot;, car: &quot;dar&quot;, sar: &quot;par&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>hash.remove(param)</strong><br/>
Removes the value with name <code>param</code>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">hash</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// http://url.com#car=dar&amp;sar=par</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>hash.clear()</strong><br/>
Clears entire hash.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">hash</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span><span class='line'><span class="c1">// http://url.com#</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Example</h2>

<script src="http://jonnystromberg.com/javascripts/libs/hash.js"></script>


<ul>
    <li><a href="javascript:hash.add({ foo: 'bar' });">Run <code>hash.add({ foo: "bar" });</code></a></li>
    <li><a href="javascript:hash.add({ car: 'dar', sar: 'par' })">Run <code>hash.add({ car: "dar", sar: "par" });</code></a></li>
    <li><a href="javascript:hash.remove('foo')">Run <code>hash.remove("foo");</code></a></li>
    <li><a href="javascript:alert(hash.get('foo'))">Run <code>alert(hash.get("foo"));</code></a></li>
    <li><a href="javascript:hash.clear()">Run <code>hash.clear();</code></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Box2D JaveScript Tutorial]]></title>
    <link href="http://jonnystromberg.com/box2d-javascript-tutorial/"/>
    <updated>2012-02-07T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/box2d-javascript-tutorial</id>
    <content type="html"><![CDATA[<p><canvas id="box2d-demo" width="740" height="380" style="background-color:#2A3038; margin:-30px -30px 20px;"></canvas></p>

<script src="http://jonnystromberg.com/tutorials/box2d-web/box2d-web-2.1.a.3.js"></script>


<script src="http://jonnystromberg.com/tutorials/box2d-web/box2d-web-demo.js"></script>


<p>This is tutorial is written as a compliment to my <a href="http://twitter.com/sthlmjs">@Sthlmjs</a> presentation at 7 February 2012. The presentation was called <strong>&#8220;Box2D-web - Uncovering The Magic Behind SilarApp&#8221;</strong> and refers to the <a href="http://jonnystromberg.com/projects/silarapp">SilarApp project</a> that I work in together with <a href="http://twitter.com/himynameisjonas">@himynameisjonas</a> and <a href="http://twitter.com/ingmr">@ingmr</a>.</p>

<p><a href="http://silarapp.com"><img class="float-right image-right" src="http://jonnystromberg.com/images/posts/2012/box2d-web/silarapp.jpg"></a></p>

<p>The tutorial explains how to the demo above was made and you can find the source at <a href="http://github.com/javve/box2d-javascript">Github.com/javve/box2d-javascript</a>. I <strong>strongly</strong> encourages you to download the source and look at it while reading this tutorial.</p>

<p>I will go through the demo step by step in order of execution.</p>

<h2>Background</h2>

<p><a href="http://box2d.org/">Box2D</a> is a open source physics engine originally written by <a href="https://twitter.com/#!/erin_catto">Erin Catto</a> in C++. Over the years it has been ported to a number of <a href="http://www.box2d.org/links.html">different languages</a>. Today there are two version in JavaScript,  <strong><a href="http://code.google.com/p/box2dweb/">Box2d-web</a></strong> and <a href="http://box2d-js.sourceforge.net/">Box2d-js</a>. The latter one is sadly no longer supported so my suggestion is using the first. It is a direct port from <a href="http://www.box2dflash.org/">Box2DFlash 2.1a</a> and is the one that this tutorial is using.</p>

<h2>Good things to know</h2>

<ul>
<li>Box2d does <strong>not</strong> uses pixels, it measures MKS (meters, kilograms, and seconds). This could be a bit weird but no worries! <a href="http://blog.zincroe.com/2009/05/units-in-box2d/">Read more here</a>.</li>
<li>Box2d only handles convex elements. It is however possible to put together multiple element to create concaves.<br/>
<img src="http://jonnystromberg.com/tutorials/box2d-web/convex.png"></li>
<li>Box2D is built to optimally handle dynamic (moving) objects that are 0.1-10 meters, and static (not moving) that are up to 50 meters (yeah, no particle simulations).</li>
<li>Box2D <strong>only</strong> handles that physics, it does not handles drawing objects. This means that we have to paint the <code>&lt;canvas&gt;</code> ourselves (see the <strong>Loop</strong> section). <strong>Notice</strong>: Box2D however provides a debugging feature where it can draw the objects itself, search for <code>debug</code> in the demo source to see how to use it.</li>
</ul>


<h2>Getting started</h2>

<ol>
<li><a href="http://code.google.com/p/box2dweb/downloads/list">Download Box2d-web</a></li>
<li>Include <code>box2d-web-2.1.a.3.js</code> at your page.</li>
<li>Create a <code>&lt;canvas&gt;</code> with including <code>height</code>, <code>width</code> and <code>id</code>.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">canvas</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;box2d-demo&quot;</span> <span class="nx">width</span><span class="o">=</span><span class="s2">&quot;960&quot;</span> <span class="nx">height</span><span class="o">=</span><span class="s2">&quot;480&quot;</span> <span class="nx">backgroundColor</span><span class="o">=</span><span class="s2">&quot;2A3038&quot;</span><span class="o">&gt;&lt;</span><span class="err">/canvas&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;box2d-web-2.1.a.3.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Basic demo structure</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// First: Create some Box2D shortcuts.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initiate all local variables used in this demo</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Handles all initiation stuff (that is not directly related to box2d)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">init</span> <span class="o">=</span> <span class="p">{</span> <span class="p">..</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Used for adding boxes and circles</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">{</span> <span class="p">..</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Contains all functions that interacts with Box2d (except those in var loop = {..};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">box2d</span> <span class="o">=</span> <span class="p">{</span> <span class="p">..</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Contains the functions that are called over and over again to make stuff move</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">loop</span> <span class="o">=</span> <span class="p">{</span> <span class="p">..</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Various helpers</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="p">{</span> <span class="p">..</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The base Shape and Box &amp; Circle that share the Shape prototype</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Shape</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">..</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Circle</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">..</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Box</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">..</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Initiation</h2>

<p>The initiation is done by the <code>var init = { .. }</code> object that contains a collection of function that are needed to set up the demo.</p>

<p>It begins with <code>init.start()</code> that executes the other functions.</p>

<ul>
<li>Set the <code>SCALE = 30</code>. Meaning that all pixel values are divide with 30 to get the size in meters. E.g. the canvas is <code>740 / 30 =  24.6 m</code>.</li>
<li>Initiate the canvas area of which the demo will use.</li>
<li>Call <code>box2d.create.world()</code> to setup the <code>world</code> object that &#8220;is&#8221; Box2D.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">world</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">b2World</span><span class="p">(</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">b2Vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>       <span class="c1">// gravity</span>
</span><span class='line'>  <span class="p">,</span> <span class="kc">false</span>                  <span class="c1">// allow sleep</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create the default fixture object with <code>box2d.create.defaultFixture()</code> which will be used for all shapes (more about fixers later).</li>
<li>Create walls, ground and roof by simply use the <code>add.box()</code> function to add boxes outside the visible area.</li>
<li>Init callbacks, meaning the ones that are triggered when user clicks on the canvas (more about the mouse-related stuff later).</li>
<li>Fires of the loop and starts the demo! (read more later in the <strong>Loop</strong> section.</li>
</ul>


<h2>Adding shapes</h2>

<p>When an user clicks on the <code>&lt;canvas&gt;</code> the function <code>add.random()</code> is called with calls <code>add.box()</code> or <code>add.circle()</code>. Here is the code for creating a <code>Circle</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="mf">0.5</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shape</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'><span class="nx">shapes</span><span class="p">[</span><span class="nx">shape</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">;</span>
</span><span class='line'><span class="nx">box2d</span><span class="p">.</span><span class="nx">addToWorld</span><span class="p">(</span><span class="nx">shape</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see it first creates a Circle object (that is used to  paint the object on the screen). Then it calls <code>box2d.addToWorld()</code> that adds the shape to Box2D. Next section explains how that function works.</p>

<h3>About Box2D Bodies and Fixtures</h3>

<p>All elements in Box2D are called <strong>bodies</strong> and each body have once or more <strong>fixtures</strong>. Usually you see it like bodies are containers which have a position and then contains fixtures that have a shape, density, friction and collision control. In this demo all fixtures uses the sam default fixture definition.</p>

<h4>Bodies</h4>

<ul>
<li>Contains fixture(s)</li>
<li>Position</li>
<li>Angle</li>
<li>Static or dynamic</li>
</ul>


<h4>Fixtures</h4>

<ul>
<li>Density</li>
<li>Friction</li>
<li>Has a shape</li>
<li>Collision</li>
</ul>


<p>Here are the code that handles body and fixture-related stuff in this demo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Initiated earlier</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fixDef</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">b2FixtureDef</span><span class="p">;</span>
</span><span class='line'><span class="nx">fixDef</span><span class="p">.</span><span class="nx">density</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'><span class="nx">fixDef</span><span class="p">.</span><span class="nx">friction</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'><span class="nx">fixDef</span><span class="p">.</span><span class="nx">restitution</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">box2d</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">addToWorld</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">shape</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">bodyDef</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">create</span><span class="p">.</span><span class="nx">bodyDef</span><span class="p">(</span><span class="nx">shape</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">create</span><span class="p">.</span><span class="nx">body</span><span class="p">(</span><span class="nx">bodyDef</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">shape</span><span class="p">.</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">create</span><span class="p">.</span><span class="nx">fixtures</span><span class="p">.</span><span class="nx">circle</span><span class="p">(</span><span class="nx">body</span><span class="p">,</span> <span class="nx">shape</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">create</span><span class="p">.</span><span class="nx">fixtures</span><span class="p">.</span><span class="nx">box</span><span class="p">(</span><span class="nx">body</span><span class="p">,</span> <span class="nx">shape</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">create</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">world</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">..</span> <span class="p">},</span>
</span><span class='line'>        <span class="nx">defaultFixture</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">..</span> <span class="p">},</span>
</span><span class='line'>        <span class="nx">bodyDef</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">shape</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">bodyDef</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">b2BodyDef</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">shape</span><span class="p">.</span><span class="nx">isStatic</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">bodyDef</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">b2Body</span><span class="p">.</span><span class="nx">b2_staticBody</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">bodyDef</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">b2Body</span><span class="p">.</span><span class="nx">b2_dynamicBody</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">bodyDef</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">bodyDef</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">bodyDef</span><span class="p">.</span><span class="nx">userData</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">bodyDef</span><span class="p">.</span><span class="nx">angle</span> <span class="o">=</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">angle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">bodyDef</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">body</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">bodyDef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">world</span><span class="p">.</span><span class="nx">CreateBody</span><span class="p">(</span><span class="nx">bodyDef</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">fixtures</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">circle</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">body</span><span class="p">,</span> <span class="nx">shape</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">fixDef</span><span class="p">.</span><span class="nx">shape</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">b2CircleShape</span><span class="p">(</span><span class="nx">shape</span><span class="p">.</span><span class="nx">radius</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">body</span><span class="p">.</span><span class="nx">CreateFixture</span><span class="p">(</span><span class="nx">fixDef</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">box</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">body</span><span class="p">,</span> <span class="nx">shape</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">fixDef</span><span class="p">.</span><span class="nx">shape</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">b2PolygonShape</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">fixDef</span><span class="p">.</span><span class="nx">shape</span><span class="p">.</span><span class="nx">SetAsBox</span><span class="p">(</span><span class="nx">shape</span><span class="p">.</span><span class="nx">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">shape</span><span class="p">.</span><span class="nx">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">body</span><span class="p">.</span><span class="nx">CreateFixture</span><span class="p">(</span><span class="nx">fixDef</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="err">â¦</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The loop</h2>

<p>The loop is the center of each Box2D application (or other game etc). In this demo it has three steps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// On my signal: Unleash hell.</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="nx">hell</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">loop</span><span class="p">.</span><span class="nx">step</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">loop</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">loop</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">requestAnimFrame</span><span class="p">(</span><span class="nx">hell</span><span class="p">);</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">loop</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">step</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">stepRate</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">world</span><span class="p">.</span><span class="nx">Step</span><span class="p">(</span><span class="nx">stepRate</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">world</span><span class="p">.</span><span class="nx">ClearForces</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">update</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">world</span><span class="p">.</span><span class="nx">GetBodyList</span><span class="p">();</span> <span class="nx">b</span><span class="p">;</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">m_next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">IsActive</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">GetUserData</span><span class="p">()</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">GetUserData</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">shapes</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">GetUserData</span><span class="p">()].</span><span class="nx">update</span><span class="p">(</span><span class="nx">box2d</span><span class="p">.</span><span class="nx">get</span><span class="p">.</span><span class="nx">bodySpec</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">needToDraw</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">draw</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">needToDraw</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">debug</span><span class="p">)</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">shapes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">shapes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">draw</span><span class="p">(</span><span class="nx">ctx</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">needToDraw</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>First one thing: <code>requestAnimFrame()</code> is simply a helper function that makes animation smarter. <a href="http://paulirish.com/2011/requestanimationframe-for-smart-animating/">Read more about it here</a>.</p>

<ol>
<li>The first step <code>loop.step();</code> tells the Box2D world-object to take one step, and it is here where all the magic happens (moving, collision detection etc).</li>
<li>The next step <code>loop.update();</code> collects the updates from Box2D and transfer them to our own shapes (<code>Circle</code> and <code>Box</code>).</li>
<li>The last step <code>loop.draw()</code> redraws the <code>&lt;canvas&gt;</code> with all the updated shapes.</li>
</ol>


<h3>About drawing</h3>

<p>Drawing shapes/object on the screen is done with regular canvas-methods etc. Both <code>Circle</code>and <code>Box</code> have their own <code>.draw()</code> method. I will not explain these in detail, but they basically get the position from the <code>world</code> object and then uses it to paint itself on the <code>canvas</code> with help of the <code>ctx</code>. Here it the <code>.draw()</code> method from <code>Box</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">SCALE</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">*</span> <span class="nx">SCALE</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">angle</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="o">*</span> <span class="nx">SCALE</span><span class="p">,</span> <span class="o">-</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="o">*</span> <span class="nx">SCALE</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span>
</span><span class='line'>        <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> <span class="o">*</span> <span class="nx">SCALE</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> <span class="o">*</span> <span class="nx">SCALE</span><span class="p">,</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="nx">SCALE</span><span class="p">,</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">*</span> <span class="nx">SCALE</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping up</h2>

<p>That&#8217;s it. I hope you liked the tutorial and if you have any questions or suggestions feel free to ping me at Twitter <a href="http://twitter.com/javve">@javve</a>.</p>

<p>Hopefully will I follow up this tutorial with a new one and with more <a href="http://github.com/javve/box2d-javascript">demos at Github</a>.</p>

<h2>Continue reading</h2>

<ul>
<li><a href="http://www.box2d.org/manual.html">Box2D manual</a> contains a lot of interesting stuff.</li>
<li><a href="http://creativejs.com/2011/09/box2d-javascript-tutorial-series-by-seth-ladd/">Seth Ladd&#8217;s excellent Box2D-web tutorials</a> (it&#8217;s from these I learned Box2D-web)</li>
<li><a href="http://blog.j15r.com/2011/12/for-those-unfamiliar-with-it-box2d-is.html">Box2D-web performance</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Releasing PNGTextures.com]]></title>
    <link href="http://jonnystromberg.com/releasing-png-textures/"/>
    <updated>2012-02-06T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/releasing-png-textures</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The List.js Plugin Guide]]></title>
    <link href="http://jonnystromberg.com/listjs-plugins-guide/"/>
    <updated>2012-01-26T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/listjs-plugins-guide</id>
    <content type="html"><![CDATA[<p><img class="float-right default" src="http://jonnystromberg.com/images/projects/listjs/listjs-logo.jpg"></p>

<p>Version 0.2.0 introduced a new feature of List.js called plugins. This post will guide you through how to use and make plugins.</p>

<p>Plugins are scripts that can be loaded at List.js initiation and then becomes accessible with <code>listObj.pluginName</code>.</p>

<p>There are one plugin bundled with List.js and it is found in <code>/plugins/paging/list.paging.js</code> (and <code>/plugins/paging/list.paging.min.js</code>). Here is some code that shows how to load it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">valueNames</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;category&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">page</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">[</span> <span class="s1">&#39;paging&#39;</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">listObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">(</span><span class="s1">&#39;listId&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is also possible to add options and load multiple instances of tha same plugins (if the plugin itself allows it).</p>

<p><strong>Notice</strong>: If the property <code>name</code> is added in the plugin option parameter does the plugin become accessible through <code>listObj.namePropertyValue</code> (<code>listObj.paging2</code> in this example). This is useful when having multiple instances of the same plugin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">valueNames</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;category&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">page</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">[</span> <span class="s1">&#39;paging&#39;</span> <span class="p">],</span>
</span><span class='line'>      <span class="p">[</span> <span class="s1">&#39;paging&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;paging2&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">pagingClass</span><span class="o">:</span> <span class="s2">&quot;topPaging&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">innerWindow</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">left</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">right</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">listObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">(</span><span class="s1">&#39;listId&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Read more about the <a href="#">paging plugin here</a>.</p>

<h2>Make Your Own Plugin</h2>

<p>This is everything that is needed to make you own plugin. Notice  the two parameters: <code>list</code> is the actual list that uses the plugin, <code>options</code> contains the options shown in the example above.</p>

<figure class='code'><figcaption><span>list.yourPluginName.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">List</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">yourPluginName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Do stuff!</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The plugin is run after the list is initiated. See the source code of the <a href="#">paging plugin here</a>.</p>

<h3>Naming</h3>

<p>All List.js plugins should be named <code>list.pluginName.js</code> or <code>list.pluginName.min.js</code>.</p>

<h3>A Good Tip</h3>

<p>Use <code>list.on('updated', yourFancyFunction);</code> to updated you plugin when the list have been updated.</p>

<p>One other really useful method is <code>.update()</code> that updates the list and then triggers the above metioned event (be careful, do not make an infinit loop here).</p>

<p>Remeber that you find all List &amp; Item methods in the <a href="https://github.com/javve/list/blob/master/README.md">documentation at Github</a>.</p>

<h3>Pull requests or links wanted</h3>

<p>If you&#8217;ve made a nice, well written and useful plugin, I would be very happy if you <a href="http://github.com/javve/list">made a pull request</a> so I could bundle it with List.js, or sent me a link so I could add it to <a href="http://listjs.com">Listjs.com</a> and <a href="http://github.com/javve/list">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The List.js Paging Plugin]]></title>
    <link href="http://jonnystromberg.com/listjs-paging-plugin/"/>
    <updated>2012-01-26T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/listjs-paging-plugin</id>
    <content type="html"><![CDATA[<p>The List.js paging plugin is bundled with the script and is located in <code>/plugins/paging/list.paging.js</code> and <a href="http://listjs.com/examples/paging.html">click here</a> if you want to see it in action. To use the plugin just include the .js file at your page and do like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;listId&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      /* A bunch of items */
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;paging&quot;</span><span class="nt">&gt;&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">valueNames</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;category&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">page</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">[</span> <span class="s1">&#39;paging&#39;</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">listObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">(</span><span class="s1">&#39;listId&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the paging that gets created looks <em><strong>kinda</strong></em> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;listId&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      /* A bunch of items */
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;paging&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;li&gt;</span>
</span><span class='line'>         <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span> <span class="na">href=</span><span class="s">&quot;javascript:function Z(){Z=\&quot;</span><span class="err">\&quot;}</span><span class="na">Z</span><span class="err">()&quot;</span><span class="nt">&gt;</span>1<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>           <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>     <span class="nt">&lt;li&gt;</span>
</span><span class='line'>         <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;javascript:function Z(){Z=\&quot;</span><span class="err">\&quot;}</span><span class="na">Z</span><span class="err">()&quot;</span><span class="nt">&gt;</span>2<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>           <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>     <span class="nt">&lt;li&gt;</span>
</span><span class='line'>         <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             ...
</span><span class='line'>           <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are som options available thought.</p>

<ul>
<li><p><strong>name</strong> <em>(String, default: &#8220;paging&#8221;)</em><br/>
Default option for all plugins. Defines how to access the plugin from the list object <code>listObj.pluginName</code>.</p></li>
<li><p><strong>pagingClass</strong> <em>(String, default: &#8220;paging&#8221;)</em><br/>
The class that defines which <code>ul</code> that should contain the paging (must be inside the list container)</p></li>
<li><p><strong>innerWindow</strong> <em>(Int, default: 2)</em><br/>
How many pages should be visible on each side of the current page.<br/>
<code>innerWindow: 2</code> &#8230; 3 4 <strong>5</strong> 6 7 &#8230;<br/>
<code>innerWindow: 1</code> &#8230; 4 <strong>5</strong> 6 &#8230;</p></li>
<li><p><strong>outerWindow</strong> <em>(Int, default: 0)</em><br/>
How many pages should be visible on from the beginning and from the end of the paging.<br/>
<code>outerWindow: 0</code> &#8230; 3 4 <strong>5</strong> 6 7&#8230;<br/>
<code>outerWindow: 2</code> 1 2 &#8230; 4 5 <strong>6</strong> 7 8 &#8230; 11 12</p></li>
<li><p><strong>left</strong> <em>(Int, default: 0)</em><br/>
Same as <code>outerWindow</code> but only from left.
<code>outerWindow: 2</code> and <code>left: 1</code> 1 &#8230; 4 5 <strong>6</strong> 7 8 &#8230; 11 12</p></li>
<li><p><strong>right</strong> <em>(Int, default: 0)</em><br/>
Same as <code>left</code> but from right.</p></li>
</ul>


<p><strong>Notice</strong>: The number of items at each page are decided by the List.js own property <code>page</code>. To set this just add <code>page: Number</code> to the option object sent into the List.js constructor (as been done in both of the examples at this page).</p>

<h2>Two pagings</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;listId&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;pagingTop&quot;</span><span class="nt">&gt;&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      /* A bunch of items */
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;pagingBottom&quot;</span><span class="nt">&gt;&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pagingTopOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;pagingTop&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">pagingClass</span><span class="o">:</span> <span class="s2">&quot;pagingTop&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">outerWindow</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pagingBottomOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;pagingBottom&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">pagingClass</span><span class="o">:</span> <span class="s2">&quot;pagingBottom&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">innerWindow</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">left</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">right</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">listOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">valueNames</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;category&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nx">page</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">[</span> <span class="s1">&#39;paging&#39;</span><span class="p">,</span> <span class="nx">pagingTopOptions</span><span class="p">],</span>
</span><span class='line'>      <span class="p">[</span> <span class="s1">&#39;paging&#39;</span><span class="p">,</span> <span class="nx">pagingBottomOptions</span><span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">listObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">(</span><span class="s1">&#39;listId&#39;</span><span class="p">,</span> <span class="nx">listOptions</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List.js 0.2.0: Plugins and Paging]]></title>
    <link href="http://jonnystromberg.com/listjs-0-2-0-plugins-paging/"/>
    <updated>2012-01-26T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/listjs-0-2-0-plugins-paging</id>
    <content type="html"><![CDATA[<p><em><strong><a href="http://listjs.com">Go to Listjs.com</a> and download tha latest version!</strong></em>
<img class="float-right default" src="http://jonnystromberg.com/images/projects/listjs/listjs-logo.jpg"></p>

<p>This is a release many have been waiting for! Beta 0.2.0 includes several large improvments and I will go through them one by one.</p>

<h2>Plugins!</h2>

<p>The biggest update in List.js 0.2.0 is the support for plugins. With plugin it gets much easier to make scripts that integrate with List.js. <a href="http://jonnystromberg.com/listjs-plugins-guide/">Read more Â»</a></p>

<h2>Paging Plugin</h2>

<p>The first plugin includes the most wanted feature in List.js history (haha). Paging! <a href="http://jonnystromberg.com/listjs-paging-plugin/">Read more about the paging plugin Â»</a></p>

<h2>Better options for initization of empty lists</h2>

<p>A new option for initiating empty lists have been added. Now you can use a html-string in the <code>item</code> options. Example shown here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;hacker-list&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">ul</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;list&quot;</span><span class="o">&gt;&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">item</span><span class="o">:</span> <span class="s1">&#39;&lt;li&gt;&lt;h3 class=&quot;name&quot;&gt;&lt;/h3&gt;&lt;p class=&quot;city&quot;&gt;&lt;/p&gt;&lt;/li&gt;&#39;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jonny&#39;</span><span class="p">,</span> <span class="nx">city</span><span class="o">:</span><span class="s1">&#39;Stockholm&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">,</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jonas&#39;</span><span class="p">,</span> <span class="nx">city</span><span class="o">:</span><span class="s1">&#39;Berlin&#39;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hackerList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">(</span><span class="s1">&#39;hacker-list&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">values</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Notice</strong>: this do not work with <code>&lt;tr&gt;</code>.</p>

<h2>New initization options</h2>

<ul>
<li><strong>page</strong> <em>(int, default: 200)</em> have replaced <code>maxVisibleItemsCount</code> and represents how many items that should be visible at the same time.</li>
<li><strong>i</strong> <em>(int, default: 0)</em> defines which item should be the first visble.</li>
<li><strong>plugins</strong> <em>(array, default: undefined)</em> defines which plugins this instance of the List should use. <a href="http://jonnystromberg.com/listjs-plugins-guide/">Read more about plugins Â»</a></li>
</ul>


<h2>New properties</h2>

<ul>
<li><strong>visibleItems</strong> <em>(array)</em> Returns the currently visible items.</li>
<li><strong>matchingItems</strong> <em>(array)</em> Returns the items matching the currently active searches and filters, it could there by contains non visible items. If no active searches and filters does <code>.matchingItems</code> contain same items as <code>.items</code></li>
<li><strong>searched</strong> <em>(boolean)</em> Returns <code>true</code> if there are a active search in the list.</li>
<li><strong>filtered</strong> <em>(boolean)</em> Returns <code>true</code> if there are a active filter in the list.</li>
<li><strong>plugins</strong> <em>(object)</em> Returns the <em>plugins</em> that could be initiated (to interact with active plugins use <code>listObj.pluginName</code>).</li>
</ul>


<h2>New methods</h2>

<ul>
<li>Replaced <code>.addAsync(items)</code> with <code>.add(items, callback)</code>.</li>
<li><strong>show()</strong>
Shows <code>page</code> number of items from <code>i</code>. Use for paging etc.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">itemsInList</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Jonny&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">,</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">name</span> <span class="s2">&quot;Gustaf&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">,</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">name</span> <span class="s2">&quot;Jonas&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">,</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">name</span> <span class="s2">&quot;Egon&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">,</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">name</span> <span class="s2">&quot;Frank&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">,</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">,</span> <span class="nx">name</span> <span class="s2">&quot;Ester&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>      
</span><span class='line'><span class="nx">listObj</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="o">-&gt;</span> <span class="nx">Display</span> <span class="nx">item</span> <span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>update()</strong>
Updates the current state of the list. Meaning that if you for instance hides some items with <code>itemObj.hide()</code> method then you have to call <code>listObj.update()</code> if you want the paging to update.</li>
<li><strong>on(event, callback)</strong><br/>
Execute <code>callback</code> when list have been updated (triggered by <code>update()</code>, which is used by a lot of methods).</li>
</ul>


<h2>New Item methods</h2>

<ul>
<li><strong>matching()</strong>
Returns true if the item match the current filter and searches. Visible items always matches, but matching items are not always visible.</li>
<li><strong>visible()</strong>
Returns boolean. True if the item is visible. Visible items always matches, but matching items are not always visible.</li>
</ul>


<h2>Various</h2>

<ul>
<li>Fixed IE7 bug in helper <code>hasClass()</code>, <code>addClass()</code> and <code>removeClass()</code>.</li>
<li>Fix searching with null and undefined values + using <code>searchString = 0</code></li>
</ul>


<p>That was it! Pretty exciting right? Looking forward do see some awesome plugins!</p>

<p><em><strong><a href="http://listjs.com">Go to Listjs.com</a> and download tha latest version!</strong></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List.js Beta 0.1.4: Filter, search and sort!]]></title>
    <link href="http://jonnystromberg.com/listjs-beta-0-1-4-filter-search-sort/"/>
    <updated>2011-11-29T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/listjs-beta-0-1-4-filter-search-sort</id>
    <content type="html"><![CDATA[<p>Version 0.1.4 of List.js is now released and it contains one major update and one minor.</p>

<p>The <strong>major</strong> one is that filters, search and sort now depend on each other. If you searches in a filtered list, the items hidden by the filter will stay hidden. The same goes if you have searched in a list and then filters the result.</p>

<p>The minor update is that <code>.filter()</code> is now used to reset filters instead of <code>.filter(false)</code>.</p>

<p>Grab the latest version at <a href="http://github.com/list/javve">Github.com/javve/list</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List.js Beta 0.1.3 release!]]></title>
    <link href="http://jonnystromberg.com/listjs-beta-0-1-3-release/"/>
    <updated>2011-11-29T00:00:00+01:00</updated>
    <id>http://jonnystromberg.com/listjs-beta-0-1-3-release</id>
    <content type="html"><![CDATA[<p>Today a new version of List.js was released. There are <strong>one major change</strong> that you have to be aware of!</p>

<p>The sort buttons now sorts values based on <code>data-sort=âvalueNameâ</code> instead of <code>rel=âvalueNameâ</code>. The resone for this is basically that rel=ââ is not valid at most elements according to W3C.</p>

<h2>Other changes in the 0.1.3 release (from the documentation):</h2>

<ul>
<li>Added function <code>.clear()</code> that removes all items from the list</li>
<li>Changed the sort function to be based on <code>data-sort</code> instead of <code>rel</code></li>
<li>When sorting one category, all sort-related classes will be removed from the other sort buttons</li>
<li>Updated <code>.sort(valueName, sortFunction)</code> to <code>.sort(valueName, options)</code>, see more info in the documentation</li>
</ul>


<p>Go to <a href="http://github.com/javve/list">github.com/javve/list</a> to download the latest version (and remember to change your sort button)!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance, wroooooom! Index, search and sort thousands of items]]></title>
    <link href="http://jonnystromberg.com/performance-wroooooom-index-search-and-sort/"/>
    <updated>2011-10-28T00:00:00+02:00</updated>
    <id>http://jonnystromberg.com/performance-wroooooom-index-search-and-sort</id>
    <content type="html"><![CDATA[<p>There have been some questions about List.js performance.
How many items can it handle? How fast is the indexing,
sorting and searching in larger lists?</p>

<p>Today I have an answer: Try it yourself at <a href="http://listjs.com/examples/performance-test.html">http://listjs.com/examples/performance-test.html</a></p>

<p>But for you who just want some quick stats have I done
some benchmarking myself.<br/>
<strong>Important</strong>: All these stats are based on first runs
(read more about first runs in the last paragraph of
this blog post). And I have a new Macbook Pro and Chrome,
so these stats are first run-<strong>best cases</strong>):</p>

<h2>Indexing</h2>

<ul>
<li>Index 100 items Ã¡ 3 value names ~ <strong>5 ms</strong></li>
<li>Index 1000 items Ã¡ 3 value names ~ <strong>50 ms</strong></li>
<li>Index 10 000 items Ã¡ 3 value names ~ <strong>360 ms</strong></li>
</ul>


<h2>Searching</h2>

<ul>
<li>Search for a 4 char string in all values in 100 items Ã¡ 3 value names ~ <strong>7 ms</strong></li>
<li>Search for a 4 char string in all values in 1000 items Ã¡ 3 value names ~ <strong>90 ms</strong></li>
<li>Search for a 4 char string in all values in 10 000 items Ã¡ 3 value names ~ <strong>800 ms</strong></li>
</ul>


<h2>Sorting</h2>

<ul>
<li>Sort 100 items ~ <strong>9 ms</strong></li>
<li>Sort 1000 items ~ <strong>90 ms</strong></li>
<li>Sort 10 000 items ~ <strong>1 600 ms</strong></li>
</ul>


<h2>Adding</h2>

<ul>
<li>Add 100 items to list with 1 item ~ <strong>8 ms</strong></li>
<li>Add 1000 items to list with 1 item ~ <strong>14 ms</strong></li>
<li>Add 10 00 items to list with 1 item ~ <strong>30 ms</strong></li>
</ul>


<p>One thing worth mentioning when it comes to List.js and performance is that the default settings (changeable) only allows 200 items to be visible at the same time. This is to boost performance and helps A LOT for larger list.</p>

<p>(Hint: In future releases the handling of larger lists will be much smoother, promis)</p>

<p>One other thing worth mentioning is that modern browsers (like Chrome, Safari,
Firefox) optimizes complex JavaScript at runtime which means that all scripts
get MUCH faster the second time they are called. The data above are all based
on first runs. <strong>Searching in 10 000 takes e.g 18 ms the second time compared
to 800 the first.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listjs.com with examples is now available at GitHub]]></title>
    <link href="http://jonnystromberg.com/listjs-com-with-examples-is-now-available-at-github/"/>
    <updated>2011-10-25T00:00:00+02:00</updated>
    <id>http://jonnystromberg.com/listjs-com-with-examples-is-now-available-at-github</id>
    <content type="html"><![CDATA[<p>Tonight I added the <a href="http://listjs.com/">Listjs.com website</a> to List.js Github repository.
The reason for this is simply that its a more convenient structure
for myself and there will also be easier to download the List.js
examples and try them out locally.</p>

<p>My original plan for tonight was to release some examples showing of
performance and benchmarking, but other work got in the way. But I
promis you, its worth waiting for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 days, 666 followers and 37 forks]]></title>
    <link href="http://jonnystromberg.com/6-days-666-watchers-and-37-forks/"/>
    <updated>2011-10-25T00:00:00+02:00</updated>
    <id>http://jonnystromberg.com/6-days-666-watchers-and-37-forks</id>
    <content type="html"><![CDATA[<p>It has been a amazing week. For a couple of hours today List.js was:</p>

<ul>
<li>The most watched JavaScript this week</li>
<li>The most watched JavaScript this day</li>
<li>The second most watched this month</li>
<li>The second most forked this week</li>
<li>It shares the same top 5 fork-list as Twitter-Bootstrap, jQuery-Mobile and Noje.js.</li>
</ul>


<p>No pressure, no pressure. ..</p>

<p>It has also been published in some blogs etc. Really appreciate it! &lt;3</p>

<ul>
<li><a href="http://www.webresourcesdepot.com/list-js-a-javascript-library-for-flexible-lists/">http://www.webresourcesdepot.com/list-js-a-javascript-library-for-flexible-lists/</a></li>
<li><a href="http://codevisually.com/list-js-a-cross-browser-native-javascript-that-makes-your-plain-html-lists-super-flexible/">http://codevisually.com/list-js-a-cross-browser-native-javascript</a></li>
<li><a href="http://www.webappers.com/2011/10/24/make-your-lists-seachable-sortable-filterable-with-list-js/">http://www.webappers.com/2011/10/24/make-your-lists-seachable-sortable-filterable-with-list-js/</a></li>
<li><a href="http://dailyjs.com/2011/10/21/x-wing-testrunner-list/">http://dailyjs.com/2011/10/21/x-wing-testrunner-list/</a></li>
<li><a href="http://javascriptshow.com/episodes/20">http://javascriptshow.com/episodes/20</a> (11:00, very funny)</li>
<li><a href="http://technoyouth.com/web-2-resources/17123-make-your-lists">http://technoyouth.com/web-2-resources/17123-make-your-lists</a></li>
<li><a href="http://davidseah.com/code/archives/305/">http://davidseah.com/code/archives/305/</a></li>
<li><a href="http://guiabreve.com/list-js-mejorando-las-listas-html.html">http://guiabreve.com/list-js-mejorando-las-listas-html.html</a></li>
<li><a href="http://www.greepit.com/2011/10/search-sort-and-filter-html-list-element-list-js/">http://www.greepit.com/2011/10/search-sort-and-filter-html-list-element-list-js/</a></li>
<li><a href="http://brettterpstra.com/web-excursions-october-22-2011-october-24-2011/">http://brettterpstra.com/web-excursions-october-22-2011-october-24-2011/</a></li>
<li><a href="http://lubik.info/skrypty/list-js-kapitalna-biblioteka-do-wyszukiwania-sortowania-i-filtrowania-na-stronie,2662.html">http://lubik.info/skrypty/list-js-kapitalna-biblioteka-do-wyszukiwania-sortowania-i-filtrowania-na-stronie,2662.html</a></li>
</ul>


<p>Anyway, coming up next in List.js:</p>

<ul>
<li>Examples showing of the performance of List.js</li>
<li><em>secret</em> but people with large lists will like it</li>
</ul>


<p>That its! Back to codingâ¦</p>

<p><img src="http://jonnystromberg.com/images/posts/2011/tumblr_ltn42qDS3H1qzsy82.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List.js first 45 hours out in the wild]]></title>
    <link href="http://jonnystromberg.com/listjs-first-45-hours-in-the-wild/"/>
    <updated>2011-10-21T00:00:00+02:00</updated>
    <id>http://jonnystromberg.com/listjs-first-45-hours-in-the-wild</id>
    <content type="html"><![CDATA[<p>Woah! List.js first 45 hours out in the wild have been pretty crazy.</p>

<p>I âreleasedâ the script around 22:00 CEST this Wednesday (when the swedish podcast Webbradion 55 aired).</p>

<p>Yesterday around 17:00 the link was posted to Hacker News and within a hour it reached #1. It held that position for around five hours.</p>

<p><img src="http://jonnystromberg.com/images/posts/2011/hackernews.jpg"></p>

<p>Today, 24 hours after it was posted to Hacker News, Listjs.com have had  27 500 visitors, been tweeted 269 times, liked 57 times and +1âd 68 times.</p>

<p><img src="http://jonnystromberg.com/images/posts/2011/likes.jpg"></p>

<p>In addition to that github.com/javve/list got 439 watchers, 21 forks and one code contribution!</p>

<p>Craaazy.</p>

<p>Probably the best thing is the amazing response at Twitter, Im so freakinâ happy right now.</p>
]]></content>
  </entry>
  
</feed>
